{"version":3,"file":"bundle.js","mappings":"MAoFA,IAAMA,EAAO,CACTC,GAAI,WACJC,KAAM,gBACNC,WAAW,IAMG,SAAHC,GAA0B,IAArBF,EAAIE,EAAJF,KAAMC,EAASC,EAATD,UACtBE,QAAQC,IAAI,GAADC,OAAIL,EAAI,MAAAK,OAAKJ,GAC5B,CACAK,CAAUR,GAGV,IAAaS,EAAoET,EAAzEE,KAAeC,EAA0DH,EAA1DG,UAASO,EAAiDV,EAA/CW,QAAAA,OAAO,IAAAD,EAAG,sBAAqBA,EAAKE,E,kXAAMC,CAAKb,EAAI,gCAErFK,QAAQC,IAAIG,GACZJ,QAAQC,IAAIH,GACZE,QAAQC,IAAIK,GACZN,QAAQC,IAAIM,GAGZ,IAAME,EAAM,CAAC,GAAI,EAAG,IAIbC,EAA0BD,EAAG,GAAhBE,EAAaF,EAAGG,MAAA,GAEpCZ,QAAQC,IAAIS,GACZV,QAAQC,IAAIU,E","sources":["webpack://boilerplate/./src/index.js"],"sourcesContent":["/*\r\n//                         // Rest Parameters\r\n// const calculateAverage = (thing, ...numbers) => {\r\n//     let sum = 0\r\n//     numbers.forEach((num) => sum += num)\r\n//     //return sum / numbers.length (returns the number value)\r\n//     const average = sum / numbers.length\r\n//     return `The average ${thing} is ${average}.` // returns a template string with values included\r\n// }\r\n\r\n// console.log(calculateAverage('grade', 0, 100, 88, 64))\r\n\r\n// const printTeam = (teamName, coach, ...players) => {\r\n//     console.log(`Team: ${teamName}`)\r\n//     console.log(`Coach: ${coach}`)\r\n//     console.log(`Players: ${players.join(', ')}`)\r\n// }\r\n\r\n// printTeam('Liberty', 'Casey Penn', 'Marge', 'Aiden', 'Herbert', 'Sherry')\r\n\r\n\r\n// Spread syntax\r\nconst printTeam = (teamName, coach, firstPlayer, secondPlayer) => {\r\n    console.log(`Team: ${teamName}`)\r\n    console.log(`Coach: ${coach}`)\r\n    //console.log(`Players: ${players.join(', ')}`)\r\n    console.log(firstPlayer, secondPlayer)\r\n}\r\n\r\nconst team = {\r\n    name: 'Liberty',\r\n    coach: 'Casey Penn',\r\n    players: ['Marge', 'Aiden', 'Herbert', 'Sherry']\r\n}\r\n                                // Spread Operator with arrays\r\nprintTeam(team.name, team.coach, ...team.players) // separates the array into individual arguments.\r\n\r\nconst cities = ['Araraquara', 'Birigui', 'Franca']\r\nconst citiesCopy = [...cities, 'Belo Horizonte'] // You can use a Spread operator to copy an array.\r\n\r\n// let cities = ['Araraquara', 'Birigui', 'Franca']\r\n// cities= [...cities, 'Belo Horizonte']\r\n\r\nconsole.log(cities)\r\nconsole.log(citiesCopy)\r\n\r\n\r\n                                // Spread Operator with Objects\r\nlet house = {\r\n    bedrooms: 2,\r\n    bathrooms: 1.5,\r\n    yearBuilt: 2017\r\n}\r\n\r\n// Copies house object into newHouse\r\nlet newHouse = {\r\n    basement: true,\r\n    ...house, // copies house values, order matters if this was put after \"bedrooms\" it would override it.\r\n    bedrooms: 3\r\n}\r\n// newHouse.yearBuilt = 2018\r\n\r\nconsole.log(house)\r\nconsole.log(newHouse)\r\n\r\nconst person = {\r\n    name: 'Shrek',\r\n    age: 33\r\n}\r\n\r\nconst location = {\r\n    city: 'Sherwood Forest',\r\n    country: 'Duloc'\r\n}\r\n\r\nlet overview = {\r\n    ...person,\r\n    ...location\r\n}\r\n\r\nconsole.log(overview)\r\n*/\r\n\r\n                                        // Destructuring\r\nconst todo = {\r\n    id: 'asdfjklw',\r\n    text: 'Pay the bills',\r\n    completed: false   \r\n}\r\n\r\n// const text = todo.text\r\n// const completed = todo.completed\r\n\r\nconst printTodo = ({text, completed}) => { // destructuring in function parameters, insert { } in the ( )\r\n    console.log(`${text}: ${completed}`)\r\n}\r\nprintTodo(todo)\r\n\r\n//renames the new var to todoText, adds details to object and gives a value\r\nconst { text:todoText, completed, details = 'No details provided', ...others } = todo // Destructuring, this gets the values from the todo object and creates two new variables\r\n\r\nconsole.log(todoText)\r\nconsole.log(completed)\r\nconsole.log(details)\r\nconsole.log(others)\r\n\r\n// Destructuring an array\r\nconst age = [65, 0, 13]\r\n                            // creates new item in array and assigns it value\r\n//const [firstAge, secondAge, , lastAge = 123] = age // each item gets it's value in the order which they are created. the ', ,' skips an index in the array\r\n\r\nconst [firstAge, ...otherAges] = age\r\n\r\nconsole.log(firstAge) // 65\r\nconsole.log(otherAges) // 0, 13\r\n//console.log(secondAge) // 0\r\n//console.log(lastAge) // 123"],"names":["todo","id","text","completed","_ref","console","log","concat","printTodo","todoText","_todo$details","details","others","_objectWithoutProperties","age","firstAge","otherAges","slice"],"sourceRoot":""}